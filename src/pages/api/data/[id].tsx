import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';

const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: process.env.NEXT_PUBLIC_GOOGLE_SERVICE_ACCOUNT_EMAIL,
  key: process.env.NEXT_PUBLIC_GOOGLE_SERVICE_ACCOUNT_KEY,//.replace(/\\n/gm, '\n')
  scopes: [
    'https://www.googleapis.com/auth/spreadsheets',
  ],
});

export default async function handler(req, res) {
  const dataUser = new GoogleSpreadsheet(process.env.NEXT_PUBLIC_USERS_SHEET_ID, serviceAccountAuth);
  const dataTables = new GoogleSpreadsheet(process.env.NEXT_PUBLIC_TABLES_SHEET_ID, serviceAccountAuth);
  const {
    query: { id }
  } = req;

  try {
    if (!id) throw new Error();

    await dataUser.loadInfo(true);
    const { USERS } = dataUser.sheetsByTitle;
    const usersRows = await USERS.getRows();
    
    const userRow = usersRows.find(r => r.get('ID') === id)
    const user = {
      id: userRow?.get('ID'),
      email: userRow?.get('EMAIL')
    };
    
    await dataTables.loadInfo(true);
    const { TABLES } = dataTables.sheetsByTitle;
    const tablesRows = await TABLES.getRows();
    const userTablesRows: any[] = tablesRows.filter(r => r.get('USER_ID') === id) || []
    const tables = userTablesRows.map((r, index) => ({
      id: r.get('ID'),
      name: r.get('NAME'),
      initial_ui: r.get('INITIAL_UI'),
      limit_ui: r.get('LIMIT_UI'),
      initial_mgdl: r.get('INITIAL_MGDL'),
      increment_mgdl: r.get('INCREMENT_MGDL'),
      triggers_mgdl: r.get('TRIGGERS_MGDL'),
      index
    }))
    
    res.status(200).json({ user, tables, tablesCount: tables.length});
  } catch (error) {
    res.status(500).json(error);
  }
}